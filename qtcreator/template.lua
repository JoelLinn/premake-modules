local m = [[
# -*- coding: utf-8 -*-
import re
import os


def main():
    templatefile = None
    targetfile = None
    for p in os.listdir('.'):
        if p.endswith('.pro.shared'):
            templatefile = open(p)
        elif p.endswith('.pro.user'):
            targetfile = open(p, 'r')

    if not templatefile:
        print("No template(*.pro.shared) found.")
        return -1
    if not targetfile:
        print("No project file generated by QtCreator(*.pro.user) found.")
        return -1

    tar_cotent = targetfile.read()
    targetfile.close()
    targetfile = open(targetfile.name, 'w')
    pattern = re.compile('<value type="QByteArray">{(.*?)}</value>')
    uuid1 = re.findall(pattern, tar_cotent)
    if len(uuid1):
        uuid1 = uuid1[0]
    else:
        print("UUID for workspace not foundfound.")
        return -1
    pattern = re.compile('<value type="QString" key="ProjectExplorer.ProjectConfiguration.Id">{(.*?)}</value>')
    uuid2 = re.findall(pattern, tar_cotent)
    if len(uuid2):
        uuid2 = uuid2[0]
    else:
        print("UUID for Project Configuration not foundfound.")
        return -1

    try:
        tar_cotent = templatefile.read()
        tar_cotent = tar_cotent.replace("__UUID01__", uuid1)
        tar_cotent = tar_cotent.replace("__UUID02__", uuid2)
        targetfile.write(tar_cotent)
        targetfile.flush()
        targetfile.close()
        print("Done!")
    except Exception as e:
        print("Update project failed.\n{}".format(e.message))
        raise e

if __name__ == '__main__':
    main()

]]

return m
